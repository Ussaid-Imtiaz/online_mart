version: "3.9"
name: online_mart

services:
  # inventory:
  #   build:
  #     context: ./inventory_service
  #     dockerfile: Dockerfile.dev
  #   volumes:
  #     - ./inventory_service:/code # Sync local development directory with the container
  #   depends_on:
  #     - inventory_db
  #     - broker
  #   ports:
  #     - "8011:8000"
  # inventory_db:
  #   image: postgres:latest # Use the official PostgreSQL image
  #   restart: always
  #   container_name: Inventory_db
  #   environment:
  #     - POSTGRES_USER=ziakhan
  #     - POSTGRES_PASSWORD=my_password
  #     - POSTGRES_DB=inventory_db
  #   ports:
  #     - "5438:5432"
  #   volumes:
  #     - inventory_database:/var/lib/postgresql/data

  notification:
    build:
      context: ./notification_service
      dockerfile: Dockerfile.dev
    volumes:
      - ./notification_service:/code # Sync local development directory with the container
    depends_on:
      - notification_db
      - broker
    ports:
      - "8012:8000"
  notification_db:
    image: postgres:latest # Use the official PostgreSQL image
    restart: always
    container_name: notification_db
    environment:
      - POSTGRES_USER=ziakhan
      - POSTGRES_PASSWORD=my_password
      - POSTGRES_DB=notification_db
    ports:
      - "5437:5432"
    volumes:
      - notification_database:/var/lib/postgresql/data

  order:
    build:
      context: ./order_service
      dockerfile: Dockerfile.dev
    volumes:
      - ./order_service:/code # Sync local development directory with the container
    depends_on:
      - order_db
      - broker
    ports:
      - "8013:8000"
  order_db:
    image: postgres:latest # Use the official PostgreSQL image
    restart: always
    container_name: order_db
    environment:
      - POSTGRES_USER=ziakhan
      - POSTGRES_PASSWORD=my_password
      - POSTGRES_DB=order_db
    ports:
      - "5435:5432"
    volumes:
      - order_database:/var/lib/postgresql/data

  # payment:
  #   build:
  #     context: ./payment_service
  #     dockerfile: Dockerfile.dev
  #   volumes:
  #     - ./payment_service:/code # Sync local development directory with the container
  #   depends_on:
  #     - payment_db
  #     - broker
  #   ports:
  #     - "8014:8000"
  # payment_db:
  #   image: postgres:latest # Use the official PostgreSQL image
  #   restart: always
  #   container_name: payment_db
  #   environment:
  #     - POSTGRES_USER=ziakhan
  #     - POSTGRES_PASSWORD=my_password
  #     - POSTGRES_DB=payment_db
  #   ports:
  #     - "5434:5432"
  #   volumes:
  #     - payment_database:/var/lib/postgresql/data

  product:
    build:
      context: ./product_service
      dockerfile: Dockerfile.dev
    volumes:
      - ./product_service:/code # Sync local development directory with the container
    depends_on:
      - product_db
      - broker
    ports:
      - "8015:8000"

  product_db:
    image: postgres:latest # Use the official PostgreSQL image
    restart: always
    container_name: product_db
    environment:
      - POSTGRES_USER=ziakhan
      - POSTGRES_PASSWORD=my_password
      - POSTGRES_DB=product_db
    ports:
      - "5433:5432"
    volumes:
      - product_database:/var/lib/postgresql/data

  user:
    build:
      context: ./user_service
      dockerfile: Dockerfile.dev
    volumes:
      - ./user_service:/code # Sync local development directory with the container
    depends_on:
      - user_db
      - broker
    ports:
      - "8016:8000"

  user_db:
    image: postgres:latest # Use the official PostgreSQL image
    restart: always
    container_name: user_db
    environment:
      - POSTGRES_USER=ziakhan
      - POSTGRES_PASSWORD=my_password
      - POSTGRES_DB=user_db
    ports:
      - "5432:5432"
    volumes:
      - user_database:/var/lib/postgresql/data

  broker:
    image: apache/kafka:3.7.0
    hostname: broker
    container_name: broker
    ports:
      - "9092:9092"
    environment:
      KAFKA_NODE_ID: 1
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: "CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT"
      KAFKA_ADVERTISED_LISTENERS: "PLAINTEXT_HOST://localhost:9092,PLAINTEXT://broker:19092"
      KAFKA_PROCESS_ROLES: "broker,controller"
      KAFKA_CONTROLLER_QUORUM_VOTERS: "1@broker:29093"
      KAFKA_LISTENERS: "CONTROLLER://:29093,PLAINTEXT_HOST://:9092,PLAINTEXT://:19092"
      KAFKA_INTER_BROKER_LISTENER_NAME: "PLAINTEXT"
      KAFKA_CONTROLLER_LISTENER_NAMES: "CONTROLLER"
      CLUSTER_ID: "4L6g3nShT-eMCtK--X86sw"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_LOG_DIRS: "/tmp/kraft-combined-logs"

  kafka-ui:
    image: provectuslabs/kafka-ui
    container_name: kafka-ui
    ports:
      - "8080:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: "Local Kafka Cluster"
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: "broker:19092"
      DYNAMIC_CONFIG_ENABLED: "true"
    depends_on:
      - broker
volumes:
  # inventory_database:
  #   driver: local
  notification_database:
    driver: local
  order_database:
    driver: local
  # payment_database:
  #   driver: local
  product_database:
    driver: local
  user_database:
    driver: local
networks:
  default:
    driver: bridge
